const rp = require('request-promise');
const chalk = require('chalk');
// const args = require('minimist')(process.argv.slice(2));
// if (!args || !args.accounts) {
//     throw "pass accounts as argument";
// }
// let accounts = JSON.parse(args.accounts);

/**
 * 
 * curl --location --request POST 'https://snapshot.cloud-elements.com/elements/api-v2/formulas/context' \
--header 'Authorization: User LVc3bSTCkvpmnu1mmkGzOCZ3VEgXjJE0+uyDlorwawk=, Organization 589f81848b13fe777edee74dddfeb1b5' \
--header 'x-consumer-id: 123' \
--header 'Content-Type: application/json' \
--data-raw '{
    "formulaExecutionId": 14629930

}'
 */
// let totalTime = 0, milliTotal = 0;
// let current = 0, diff = 0;
const ids = [193790931, 193866334, 194000888, 194113570, 193991080, 193847891, 194164720, 193780272, 194144312, 193904269, 194039462, 193933272, 194172937, 194095975, 193840269, 193764727, 193760303, 194313136, 193792161, 194103851, 193858032, 193747846, 194487288, 194134035, 193835303, 193790156, 194440727, 193750942, 193846740, 193796726, 193802895, 194435849, 193946053, 194188484, 194002132, 193778526, 194116810, 194030000, 194492978, 193859273, 194053200, 193922285, 194078456, 194440819, 193995858, 193972214, 194334730, 194156004, 193770298, 193815103, 194293795, 194075250, 193951806, 193931692, 193778772, 193799964, 194037467, 193748169, 193766673, 193985525, 194061580, 194462469, 193773414, 193993495, 193807635, 194333468, 194475065, 193768584, 193888566, 193768946, 193987626, 193760901, 194200020, 194146969, 194105856, 193798952, 193816503, 193736316, 193920418, 193940586, 193743805, 194143374, 194131950, 194121580, 193798249, 194022963, 194177949, 194100781, 193925675, 193773764, 194073686, 193882697, 194500960, 194056267, 193955904, 194068806, 193994791, 194464826, 194451424, 193826134, 194181620, 194185147, 193848976, 193747602, 193780829, 194032406, 193747259, 194446205, 194332408, 193837804, 193881565, 193983100, 194162037, 193885775, 194442372, 194152735, 194444531, 193751338, 193834064, 193889780, 193767119, 193753490, 193963302, 193936408, 194124375, 193826704, 194500223, 193921221, 194445413, 194472743, 194311615, 194443947, 193742835, 193752827, 194165621, 194130487, 193759291, 193837302, 193785182, 193769450, 194453635, 194439401, 193924173, 193988617, 193793073, 193954701, 194149674, 193867022, 194112541, 193754223, 194459228, 194306589, 194055436, 194179833, 194452466, 194021986, 193831504, 194109158, 193845439, 194019669, 193825009, 193762561, 193758685, 194012995, 194191837, 194115165, 193909892, 193793586, 193918876, 193765194, 193973193, 193828018, 193891053, 194491014, 194473703, 193781310, 193776939, 193917006, 193823841, 193886963, 194183521, 193801270, 193900547, 193762915, 193796062, 194064730, 194025413, 193865038, 194160351, 194434681, 194005802, 194140109, 193999659, 194023946, 194142750, 194182689, 194101837, 194179006, 193774930, 194151890, 193754828, 193763358, 194176999, 193895055, 194084824, 194477067, 193944717, 194508576, 193764445, 193841351, 194174125, 193772051, 193761471, 193968941, 194051908, 194087406, 194442766, 194043578, 193875603, 193836532, 193740045, 193852498, 193795545, 193928786, 193877906, 193991634, 194003038, 193810131, 194170706, 194016449, 194437980, 194057249, 194089642, 194006809, 194484156, 194436375, 193782214, 194135733, 193820912, 194159099, 193779244, 193930336, 194179420, 194167932, 193785775, 193926980, 194010039, 193856025, 194038958, 194504797, 193870456, 194050272, 194449657, 193969598, 194300066, 193879915, 193997069, 194034638, 193874170, 193859697, 194091019, 194438311, 193746911, 194038303, 193737562, 193787349, 194503503, 193750382, 194065930, 194308135, 194470129, 193744703, 193776493, 194167579, 193978356, 194079764, 193751728, 194498434, 194325322, 193901093, 193938023, 194114257, 194439440, 194107440, 193805815, 193901520, 193909078, 193786972, 194186713, 193935147, 194336434, 194497065, 193939312, 193777948, 194134533, 193871408, 194123599, 194046258, 194008939, 194150991, 193752399, 193863903, 193758044, 194074293, 194437393, 193942460, 193961674, 194303130, 194094165, 193851116, 193739147, 193989551, 193779724, 193819043, 193893964, 194480838, 193959773, 193761953, 193755297, 193757046, 193809516, 193804395, 194328578, 193957103, 193977126, 193941920, 194118205, 193896967, 194171507, 193970829, 194085577, 193788054, 194495045, 194442607, 193808906, 193788518, 194471373, 194166658, 194125330, 193745724, 194018444, 193974992, 194486035, 193763985, 193907453, 193862718, 194097309, 193822477, 194029034, 193786528, 193992400, 193861420, 193867627, 194142075, 194446834, 194176058, 193797672, 193964617, 193771443, 193951154, 193830428, 194482595, 193767815, 193789576, 193776009, 193844725, 193783645, 193755713, 194494057, 194148002, 193869099, 193876722, 193984261, 194461133, 194026289, 193782720, 193947271, 193984979, 194457722, 193811690, 194027388, 194014360, 193934430, 193749773, 193913293, 194485178, 193872602, 194095077, 193949509, 194507116, 193789009, 194174663, 193886285, 193829137, 194067252, 193884018, 194330989, 194160941, 193958834, 194193882, 193778259, 193780581, 194138792, 193910693, 193770744, 194126699, 194047535, 193740715, 194174417, 194467513, 194501822, 193902902, 193806709, 193899429, 194489289, 193781798, 194083539, 193976587, 194063247, 193976154, 194105046, 194137266, 193780043, 194169713, 193742266, 194454925, 194046786, 193749273, 193860378, 194309144, 194092823, 194133663, 194015278, 193842677, 193979781, 194163639, 194186364, 194072038, 194035620, 193853968, 194076492, 194022426, 193967922, 194119560, 194054781, 194110556, 193853158, 194030789, 194445298, 194042526, 193784559, 193999119, 194045240, 193765860, 194146062, 193844068, 193898060, 193966116, 194070108, 194478783, 193873712, 193915326, 193746348, 194004621, 194081675, 193833050, 194440182, 194007366, 194168498, 194011130, 194180360, 193813899, 193743250, 194326351, 193943139, 193790505, 193893514, 193802361, 194059901, 193952424, 193998215, 193839359, 193857006, 193794200, 194446058, 193745101, 194475947, 193812712, 194154873, 193980904, 194040888, 193960609, 194330075, 194157044, 193772959, 193905614, 193817266, 194327352, 193892427, 194463887, 193735955, 193873083, 194510095, 194128502, 194058862, 193729226, 194310287, 194020787, 194099379];

let start = 0;
let faults = [];

const options = id => ({
    method: 'GET',
    uri: `https://api.cloud-elements.co.uk/elements/api-v2/formulas/instances/executions/${id}/steps`,
    headers: {
        Authorization: 'User ItjCK/U/QxRVVZw3Sv4uBiK3/oZex/U80tTh2X7jfA0=, Organization 2bec714a61fea24314f460b1d86c8488',
        "Content-Type": "application/json",
        "Accept": "application/json"
    },
    resolveWithFullResponse: true
});

const isTrigger = step => step.stepType === 'trigger';

const doGet = async id => {
    start = Date.now();
    await rp(options(id))
        .then(r => {

            const body = JSON.parse(r.body);

            if (!body.some(isTrigger))
                faults.push(id);

            // console.log(`Response code for request ${count} : ${r.statusCode} -`);
        })
        .catch(err => console.log(err));
}

let count = 0;
const run = async () => {
    await doGet(ids[count]);
    count++;

    if (count >= ids.length)
        console.log(faults);

    if (count < ids.length) {
        await run();
    }
}

run();